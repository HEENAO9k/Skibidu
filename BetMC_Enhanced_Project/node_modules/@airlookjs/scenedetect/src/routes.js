import { getScenes, scenedetectVersion } from './scenedetect.js';
import { FileNotFoundError, processFileOnShareOrHttp } from '@airlookjs/shared';
import createError from 'http-errors';
import { VERSION } from './config.js';
export const routes = (fastify, options, done) => {
    fastify.get('/', async (_req, res) => {
        const v = await scenedetectVersion();
        return res.code(200).send({ message: 'SceneDetect server is running',
            v,
            version: VERSION
        });
    });
    fastify.get('/get', {
        preValidation: (req, _res, done) => {
            console.log('preValidation');
            if (!req.query.file) {
                throw createError(400, 'File parameter is required');
            }
            done();
        },
    }, async (request, response) => {
        const { file } = request.query;
        try {
            console.log("SCENEDETECT ROUTES");
            console.log(VERSION);
            const result = await processFileOnShareOrHttp({
                version: VERSION,
                shares: options.shares,
                fileUrl: file,
                relativeCacheFolderPath: options.cacheDir,
                ignoreCache: false,
                processFile: async ({ file, cachePath }) => getScenes({ file, cachePath })
            });
            const { data, ...rest } = result;
            return response.code(200).send({
                ...result.data,
                ...rest,
            });
        }
        catch (error) {
            console.error('Error getting mediainfo', error);
            if (error instanceof FileNotFoundError) {
                throw createError(404, `File not found: ${file}`);
            }
            else {
                throw error;
            }
        }
    });
    done();
};
//# sourceMappingURL=routes.js.map