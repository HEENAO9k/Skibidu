export interface ShareInfo {
    name: string;
    mount: string;
    uncRoot?: string;
    cached: boolean;
    systemRoot: string;
    matches: RegExp[];
}
export declare const matchShare: (searchPath: string, share: ShareInfo) => false | string;
export declare const findPathInShares: (searchPath: string, shares: ShareInfo[]) => {
    share: ShareInfo;
    filePath: string;
};
export interface FileMetaData<ProcessedDataResponse> {
    data: ProcessedDataResponse;
    cachedAssetsPath?: string;
    cached: boolean;
    version: string;
}
export declare const processFileOnHttp: <ProcessedDataResponse>({ fileUrl, processFile }: {
    fileUrl: string;
    processFile: ({ file }: {
        file: string;
    }) => Promise<ProcessedDataResponse>;
}) => Promise<ProcessedDataResponse>;
export declare const processFileOnShareOrHttp: <ProcessedDataResponse>({ shares, fileUrl, relativeCacheFolderPath, ignoreCache, version, canProcessFileOnHttp, processFile }: {
    shares: ShareInfo[];
    fileUrl: string;
    relativeCacheFolderPath: string;
    ignoreCache: boolean;
    version: string;
    canProcessFileOnHttp?: boolean;
    processFile: ({ file, cachePath }: {
        file: string;
        cachePath?: string;
    }) => Promise<ProcessedDataResponse>;
}) => Promise<FileMetaData<ProcessedDataResponse>>;
//# sourceMappingURL=shares.d.ts.map