
import cv2
import numpy as np
from skimage.metrics import structural_similarity as ssim
import os
import logging

class VideoProcessor:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
    def analyze_video_loop(self, video_path, start_time_sec=2, top_n=5):
        """
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏õ
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not os.path.exists(video_path):
            raise Exception(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà: {video_path}")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        cap = cv2.VideoCapture(video_path)
        
        if not cap.isOpened():
            raise Exception(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: {video_path}")

        fps = cap.get(cv2.CAP_PROP_FPS)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å
        ret, first_frame = cap.read()
        if not ret:
            raise Exception("‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        
        first_gray = cv2.cvtColor(first_frame, cv2.COLOR_BGR2GRAY)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        start_frame_index = int(start_time_sec * fps)
        cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame_index)
        
        frame_index = start_frame_index
        scores = []
        
        self.logger.info("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢...")
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
        while True:
            ret, frame = cap.read()
            if not ret:
                break

            if frame.shape[:2] != first_gray.shape:
                frame_index += 1
                continue

            frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            score = ssim(first_gray, frame_gray)
            scores.append((frame_index, score))

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if frame_index % int(fps) == 0:
                self.logger.info(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà {frame_index} ({round(frame_index/fps, 2)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")

            frame_index += 1

        cap.release()

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á SSIM ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        scores.sort(key=lambda x: x[1], reverse=True)

        # ‡πÅ‡∏™‡∏î‡∏á top N
        self.logger.info(f"üìä Top {top_n} ‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å (‡∏à‡∏≤‡∏Å {start_time_sec}s):")
        for rank, (idx, score) in enumerate(scores[:top_n], 1):
            time_sec = round(idx / fps, 2)
            self.logger.info(f"‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {rank}: ‡πÄ‡∏ü‡∏£‡∏° {idx} ({time_sec} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚Üí SSIM = {round(score, 5)}")

        return scores, fps

    def create_loop_video(self, video_path, output_path, best_frame_index, fps):
        """
        ‡∏ï‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        """
        cap = cv2.VideoCapture(video_path)
        w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, (w, h))

        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
        for i in range(best_frame_index + 1):
            ret, frame = cap.read()
            if not ret:
                break
            out.write(frame)

        cap.release()
        out.release()

        self.logger.info(f"‚úÇÔ∏è ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí saved: {output_path}")
        self.logger.info(f"üïí ‡∏ï‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0.00s ‚Üí {round(best_frame_index / fps, 2)}s")
        
        return output_path

    def detect_scene_changes(self, video_path):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏â‡∏≤‡∏Å‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÉ‡∏ä‡πâ OpenCV ‡πÅ‡∏ó‡∏ô PySceneDetect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ library)
        """
        cap = cv2.VideoCapture(video_path)
        fps = cap.get(cv2.CAP_PROP_FPS)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å
        ret, prev_frame = cap.read()
        if not ret:
            return []
        
        prev_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
        scenes = [(0, 0)]  # (frame_index, timestamp)
        frame_index = 1
        threshold = 0.3  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏â‡∏≤‡∏Å
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
                
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì structural similarity
            score = ssim(prev_gray, gray)
            
            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå = ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏â‡∏≤‡∏Å
            if score < threshold:
                timestamp = frame_index / fps
                scenes.append((frame_index, timestamp))
                self.logger.info(f"üé¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏â‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ü‡∏£‡∏° {frame_index} ({round(timestamp, 2)}s)")
            
            prev_gray = gray.copy()
            frame_index += 1
        
        cap.release()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏â‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        scenes.append((frame_index - 1, (frame_index - 1) / fps))
        
        return scenes

    def process_video_for_texture(self, video_path, start_time_sec=2, top_n=5):
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö texture pack
        """
        try:
            # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏õ
            scores, fps = self.analyze_video_loop(video_path, start_time_sec, top_n)
            
            if not scores:
                self.logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏õ")
                return video_path  # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            
            # 2. ‡∏´‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_frame_index = scores[0][0]
            best_score = scores[0][1]
            
            self.logger.info(f"üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_frame_index} (SSIM: {round(best_score, 5)})")
            
            # 3. ‡∏ï‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏õ
            output_path = video_path.replace('.', '_processed.')
            processed_video = self.create_loop_video(video_path, output_path, best_frame_index, fps)
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏â‡∏≤‡∏Å (‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
            scenes = self.detect_scene_changes(processed_video)
            self.logger.info(f"üìΩÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö {len(scenes)} ‡∏â‡∏≤‡∏Å‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
            
            return processed_video
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {str(e)}")
            return video_path  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
